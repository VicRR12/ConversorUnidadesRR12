/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.alura.conversorunidades;

import javax.swing.JOptionPane;

/**
 *
 * @author RR
 */
public class ConversorUnidades extends javax.swing.JFrame {

    double cantidad=0;
    double resultado=0;
    String de;
    String a;
    public ConversorUnidades() {
        initComponents();
        this.setTitle("Conversor de Unidades");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        cbDe = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbA = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtResultado = new javax.swing.JTextField();
        btnConvertir = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbUnidad = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 239, 242));

        jLabel4.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel4.setText("De");

        cbDe.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel5.setText("A");

        cbA.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        cbA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbAItemStateChanged(evt);
            }
        });
        cbA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel6.setText("Resultado");

        txtResultado.setEditable(false);
        txtResultado.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N

        btnConvertir.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        btnConvertir.setText("Convertir");
        btnConvertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertirActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 10)); // NOI18N
        jLabel7.setText("by Victor Ramirez");

        jPanel1.setBackground(new java.awt.Color(52, 90, 242));

        jLabel1.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Conversor de unidades");

        jLabel2.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Selecciona tipo de unidad");

        cbUnidad.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        cbUnidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---Seleccionar---", "Divisas", "Temperatura", "Longitud" }));
        cbUnidad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbUnidadItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cantdad a convertir");

        txtCantidad.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel3)
                        .addGap(71, 71, 71)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel2)
                        .addGap(42, 42, 42)
                        .addComponent(cbUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(16, 16, 16)
                        .addComponent(cbDe, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel5)
                        .addGap(12, 12, 12)
                        .addComponent(cbA, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(btnConvertir))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel6)
                        .addGap(28, 28, 28)
                        .addComponent(txtResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(jLabel7))
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(cbDe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cbA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(btnConvertir)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtResultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbUnidadItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbUnidadItemStateChanged
        String seleccionCB = (String) cbUnidad.getSelectedItem();
        
        switch (seleccionCB) {
            case "Divisas":
                cbDe.removeAllItems();
                cbDe.addItem("MX");
                cbDe.addItem("USD");
                cbDe.addItem("EUR");
                cbDe.addItem("GBP");
                cbDe.addItem("JPY");
                cbDe.addItem("WON");
                cbA.removeAllItems();
                cbA.addItem("USD");
                cbA.addItem("EUR");
                cbA.addItem("GBP");
                cbA.addItem("JPY");
                cbA.addItem("WON");
                cbA.addItem("MX");
                break;
            case "Temperatura":
                cbDe.removeAllItems();
                cbDe.addItem("Celsius");
                cbDe.addItem("Fahrenheit");
                cbDe.addItem("Kelvin");
                cbA.removeAllItems();
                cbA.addItem("Fahrenheit");
                cbA.addItem("Kelvin");
                cbA.addItem("Celsius");
                break;
            case "Longitud":
                cbDe.removeAllItems();
                cbDe.addItem("Centimetros");
                cbDe.addItem("Metros");
                cbDe.addItem("Kilometros");
                cbDe.addItem("Pulgadas");
                cbDe.addItem("Pies");
                cbDe.addItem("Yardas");
                cbDe.addItem("Millas");
                cbA.removeAllItems();
                cbA.addItem("Millas");
                cbA.addItem("Yardas");
                cbA.addItem("Pies");
                cbA.addItem("Pulgadas");
                cbA.addItem("Kilometros");
                cbA.addItem("Metros");
                cbA.addItem("Centimetros");
                break;
            case "---Seleccionar---":
                cbDe.removeAllItems();
                cbA.removeAllItems();
            default:
                break;
        }
    }//GEN-LAST:event_cbUnidadItemStateChanged

    private void btnConvertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertirActionPerformed
        
        if (cbUnidad.getSelectedItem().equals("---Seleccionar---")) {
            JOptionPane.showMessageDialog(null, "Selecciona tipo de unidad a convertir");
            
        }else {
            
            if(txtCantidad.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Coloca la cantidad a convertir");
            
        }else{
            cantidad=Double.parseDouble(txtCantidad.getText());
        
            switch (cbUnidad.getSelectedItem().toString()) {
            case "Divisas":
                de=cbDe.getSelectedItem().toString();
                a=cbA.getSelectedItem().toString();
                ConversorDivisas(de,a );
                
                break;
            case "Temperatura":
                de=cbDe.getSelectedItem().toString();
                a=cbA.getSelectedItem().toString();
                ConversorTemperatura(de,a );
                
                break;
            case "Longitud":
                de=cbDe.getSelectedItem().toString();
                a=cbA.getSelectedItem().toString();
                ConversorLongitud(de,a );
                
                break;
            default:
                throw new AssertionError();
            }
        }
        }
            
    }//GEN-LAST:event_btnConvertirActionPerformed

    private void cbAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAActionPerformed
        //a= cbA.getSelectedItem().toString();
        //ConversorDivisas(de, a);
    }//GEN-LAST:event_cbAActionPerformed

    private void cbAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbAItemStateChanged
       
    }//GEN-LAST:event_cbAItemStateChanged

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        char validar=evt.getKeyChar();
        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo se aceptan numeros");
            
        }
    }//GEN-LAST:event_txtCantidadKeyTyped

    public void ConversorDivisas(String de, String a){
        
        switch (de) {
            case "MX":
                if (a.equals("USD")) {
                    resultado=cantidad*0.058;
                    
                }else if(a.equals("EUR")){
                    resultado=cantidad*0.053;
                    
                }else if(a.equals("GBP")){
                    resultado=cantidad*0.045;
                    
                }else if(a.equals("JPY")){
                    resultado=cantidad*8.301;
                    
                }else if(a.equals("WON")){
                    resultado=cantidad*76.374;
                    
                }else{
                    resultado=cantidad;
                    
                }
                
                break;
            case "USD":
                if (a.equals("MX")) {
                    resultado=cantidad*17.078;
                   
                }else if(a.equals("EUR")){
                    resultado=cantidad*0.906;
                   
                }else if(a.equals("GBP")){
                    resultado=cantidad*0.784;
                    
                }else if(a.equals("JPY")){
                    resultado=cantidad*141.75;
                    
                }else if(a.equals("WON")){
                    resultado=cantidad*1304.032;
                  
                }else{
                    resultado=cantidad;
                    
                }
                
                break;
            case "EUR":
                if (a.equals("USD")) {
                    resultado=cantidad*1.102;
                    
                }else if(a.equals("MX")){
                    resultado=cantidad*18.832;
                    
                }else if(a.equals("GBP")){
                    resultado=cantidad*0.865;
                   
                }else if(a.equals("JPY")){
                    resultado=cantidad*156.316;
                    
                }else if(a.equals("WON")){
                    resultado=cantidad*1438.114;
                    
                }else{
                    resultado=cantidad;
                    
                }
                
                break;
            case "GBP":
                if (a.equals("USD")) {
                    resultado=cantidad*1.274;
                    
                }else if(a.equals("EUR")){
                    resultado=cantidad*1.156;
                   
                }else if(a.equals("MX")){
                    resultado=cantidad*21.770;
                    
                }else if(a.equals("JPY")){
                    resultado=cantidad*180.715;
                    
                }else if(a.equals("WON")){
                    resultado=cantidad*1662.434;
                   
                }else{
                    resultado=cantidad;
                   
                }
                
                break;
            case "JPY":
                if (a.equals("USD")) {
                    resultado=cantidad*0.007;
                    //txtResultado.setText(moneda(resultado));
                }else if(a.equals("EUR")){
                    resultado=cantidad*0.006;
                    //txtResultado.setText(moneda(resultado));
                }else if(a.equals("GBP")){
                    resultado=cantidad*0.006;
                    //txtResultado.setText(moneda(resultado));
                }else if(a.equals("MX")){
                    resultado=cantidad*0.120;
                    //txtResultado.setText(moneda(resultado));
                }else if(a.equals("WON")){
                    resultado=cantidad*9.199;
                    //txtResultado.setText(moneda(resultado));
                }else{
                    resultado=cantidad;
                    //txtResultado.setText(moneda(resultado));
                }
                
                break;    
            case "WON":
                if (a.equals("USD")) {
                    resultado=cantidad*0.00076;
                    //txtResultado.setText(moneda(resultado));
                }else if(a.equals("EUR")){
                    resultado=cantidad*0.00069;
                    //txtResultado.setText(moneda(resultado));
                }else if(a.equals("GBP")){
                    resultado=cantidad*0.00060;
                    //txtResultado.setText(moneda(resultado));
                }else if(a.equals("JPY")){
                    resultado=cantidad*0.108;
                    //txtResultado.setText(moneda(resultado));
                }else if(a.equals("MX")){
                    resultado=cantidad*0.013;
                    //txtResultado.setText(moneda(resultado));
                }else{
                    resultado=cantidad;
                    //txtResultado.setText(moneda(resultado));
                }
                
                break;    
                
            default:
                throw new AssertionError();
        }
        txtResultado.setText(redondear(resultado));
    }
    
    public void ConversorTemperatura(String de, String a){
        
        switch (de) {
            case "Celsius":
                if (a.equals("Fahrenheit")) {
                    resultado=(cantidad*1.8) + 32;
                    
                }else if(a.equals("Kelvin")){
                    resultado=cantidad + 273.15;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
            case "Fahrenheit":
                if (a.equals("Celsius")) {
                    resultado=(cantidad-32)/1.8;
                    
                }else if(a.equals("Kelvin")){
                    resultado= (cantidad - 32) / 1.8 + 273.15;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
            case "Kelvin":
                if (a.equals("Fahrenheit")) {
                    resultado=1.8 * (cantidad - 273) + 32;
                    
                }else if(a.equals("Celsius")){
                    resultado=cantidad-273.15;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
            default:
                throw new AssertionError();
        }
        txtResultado.setText(redondear(resultado));
    }
    
    public void ConversorLongitud(String de, String a){
        switch (de) {
            case "Centimetros":
                if (a.equals("Metros")) {
                    resultado=cantidad*0.01;
                    
                }else if(a.equals("Kilometros")){
                    resultado=cantidad*0.00001;
                    
                }else if(a.equals("Pulgadas")){
                    resultado=cantidad *0.393701;
                    
                }else if(a.equals("Pies")){
                    resultado=cantidad *0.0328084;
                    
                }else if(a.equals("Yardas")){
                    resultado=cantidad *0.0109361;
                    
                }else if(a.equals("Millas")){
                    resultado=cantidad *0.0000062137;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
            case "Metros":
                if (a.equals("Centimetros")) {
                    resultado=cantidad*100;
                    
                }else if(a.equals("Kilometros")){
                    resultado=cantidad*0.001;
                    
                }else if(a.equals("Pulgadas")){
                    resultado=cantidad *39.3701;
                    
                }else if(a.equals("Pies")){
                    resultado=cantidad *3.28084;
                    
                }else if(a.equals("Yardas")){
                    resultado=cantidad *1.09361;
                    
                }else if(a.equals("Millas")){
                    resultado=cantidad *0.00062137;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
            case "Kilometros":
                if (a.equals("Metros")) {
                    resultado=cantidad*1000;
                    
                }else if(a.equals("Centimetros")){
                    resultado=cantidad*100000;
                    
                }else if(a.equals("Pulgadas")){
                    resultado=cantidad *39370.1;
                    
                }else if(a.equals("Pies")){
                    resultado=cantidad *3280.84;
                    
                }else if(a.equals("Yardas")){
                    resultado=cantidad *1093.61;
                    
                }else if(a.equals("Millas")){
                    resultado=cantidad *0.62137;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
                case "Pulgadas":
                if (a.equals("Metros")) {
                    resultado=cantidad*0.0254;
                    
                }else if(a.equals("Kilometros")){
                    resultado=cantidad*0.000025;
                    
                }else if(a.equals("Centimetros")){
                    resultado=cantidad *2.54;
                    
                }else if(a.equals("Pies")){
                    resultado=cantidad *0.083333;
                    
                }else if(a.equals("Yardas")){
                    resultado=cantidad *0.027778;
                    
                }else if(a.equals("Millas")){
                    resultado=cantidad *0.000016;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
                case "Pies":
                if (a.equals("Metros")) {
                    resultado=cantidad*0.3048;
                    
                }else if(a.equals("Kilometros")){
                    resultado=cantidad*0.000305;
                    
                }else if(a.equals("Pulgadas")){
                    resultado=cantidad *12;
                    
                }else if(a.equals("Centimetros")){
                    resultado=cantidad *30.48;
                    
                }else if(a.equals("Yardas")){
                    resultado=cantidad *0.3333;
                    
                }else if(a.equals("Millas")){
                    resultado=cantidad *0.000189;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
                case "Yardas":
                if (a.equals("Metros")) {
                    resultado=cantidad*0.9144;
                    
                }else if(a.equals("Kilometros")){
                    resultado=cantidad*0.000914;
                    
                }else if(a.equals("Pulgadas")){
                    resultado=cantidad *36;
                    
                }else if(a.equals("Pies")){
                    resultado=cantidad *3;
                    
                }else if(a.equals("Centimetros")){
                    resultado=cantidad *91.44;
                    
                }else if(a.equals("Millas")){
                    resultado=cantidad *0.000568;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
                case "Millas":
                if (a.equals("Metros")) {
                    resultado=cantidad*1609.344;
                    
                }else if(a.equals("Kilometros")){
                    resultado=cantidad*1.609344;
                    
                }else if(a.equals("Pulgadas")){
                    resultado=cantidad *63360;
                    
                }else if(a.equals("Pies")){
                    resultado=cantidad *5280;
                    
                }else if(a.equals("Yardas")){
                    resultado=cantidad *1760;
                    
                }else if(a.equals("Centimetros")){
                    resultado=cantidad *160934.4;
                    
                }else{
                    resultado=cantidad;
                }
                
                break;
            default:
                throw new AssertionError();
        }
        txtResultado.setText(redondear(resultado));
    }
    
    public String redondear(Double cantidad){
        return ""+Math.round(cantidad*100.00)/100.00;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConversorUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConversorUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConversorUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConversorUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConversorUnidades().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvertir;
    private javax.swing.JComboBox<String> cbA;
    private javax.swing.JComboBox<String> cbDe;
    private javax.swing.JComboBox<String> cbUnidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtResultado;
    // End of variables declaration//GEN-END:variables
}
